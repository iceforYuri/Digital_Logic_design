module alarm_control (
    input wire clk,
    input wire rst_n,
    input wire clk_1hz,           // 1Hz 时刻脉冲信号 (假设是单周期脉冲)
    input wire set_time,          // 时间调整键 (假设是单周期脉冲)
    input wire [1:0] mode,        // 模式控制
    input wire [2:0] pos,         // 位置控制

    // 当前时钟值
    input wire [1:0] hour_tens,
    input wire [3:0] hour_ones,
    input wire [2:0] minute_tens,
    input wire [3:0] minute_ones,
    input wire [2:0] second_tens,
    input wire [3:0] second_ones,

    // 闹钟设置值输出
    output reg [1:0] alarm_hour_tens,
    output reg [3:0] alarm_hour_ones,
    output reg [2:0] alarm_minute_tens,
    output reg [3:0] alarm_minute_ones,
    // 根据需要决定是否保留闹钟秒
    //output reg [2:0] alarm_second_tens,
    //output reg [3:0] alarm_second_ones,

    // 闹钟响铃和整点报时输出
    output reg alarm_ring,
    output reg time_ring
);
    localparam NORMAL_MODE = 2'b00;
    localparam ALARM_SET_MODE = 2'b10;

    // 状态寄存器
    reg alarm_set = 1'b0; // 闹钟设置标志 (只在一个 always 块中赋值)
    reg alarm_ring_active = 1'b0; // 响铃状态 (只在第二个 always 块中赋值)
    reg time_ring_active = 1'b0;  // 报时状态 (只在第二个 always 块中赋值)

    // 第一个 always 块: 管理闹钟时间寄存器 和 alarm_set 标志
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            // 复位闹钟时间
            alarm_hour_tens <= 2'd0;
            alarm_hour_ones <= 4'd0;
            alarm_minute_tens <= 3'd0;
            alarm_minute_ones <= 4'd0;
            alarm_second_tens <= 3'd0; // 复位秒
            alarm_second_ones <= 4'd0; // 复位秒
            alarm_set <= 1'b0;         // 复位闹钟设置标志
        end else begin
            // 闹钟设置模式下的调整逻辑
            if (mode == ALARM_SET_MODE && set_time) begin
                alarm_set <= 1'b1; // 进入设置模式并调整时，设置标志
                case (pos)
                    // 假设 pos 映射: 0=HT, 1=HO, 2=MT, 3=MO, 4=ST, 5=SO
                    3'd0: begin // 时十位
                        if (alarm_hour_tens == 2'd2)
                            alarm_hour_tens <= 2'd0;
                        else
                            alarm_hour_tens <= alarm_hour_tens + 1'd1;
                        // 修正: 当时十位变为2时，如果时个位>3，则将其设为3
                        if (alarm_hour_tens + 1'd1 == 2'd2 && alarm_hour_ones > 4'd3)
                           alarm_hour_ones <= 4'd3;
                    end
                    3'd1: begin // 时个位
                        if (alarm_hour_tens == 2'd2) begin // 20-23 小时
                            if (alarm_hour_ones == 4'd3)
                                alarm_hour_ones <= 4'd0;
                            else
                                alarm_hour_ones <= alarm_hour_ones + 1'd1;
                        end else begin // 00-19 小时
                            if (alarm_hour_ones == 4'd9)
                                alarm_hour_ones <= 4'd0;
                            else
                                alarm_hour_ones <= alarm_hour_ones + 1'd1;
                        end
                    end
                    3'd2: begin // 分十位
                        if (alarm_minute_tens == 3'd5)
                            alarm_minute_tens <= 3'd0;
                        else
                            alarm_minute_tens <= alarm_minute_tens + 1'd1;
                    end
                    3'd3: begin // 分个位
                        if (alarm_minute_ones == 4'd9)
                            alarm_minute_ones <= 4'd0;
                        else
                            alarm_minute_ones <= alarm_minute_ones + 1'd1;
                    end
                    // 如果需要设置闹钟秒，取消注释
                    /*
                    3'd4: begin // 秒十位
                        if (alarm_second_tens == 3'd5)
                            alarm_second_tens <= 3'd0;
                        else
                            alarm_second_tens <= alarm_second_tens + 1'd1;
                    end
                    3'd5: begin // 秒个位
                        if (alarm_second_ones == 4'd9)
                            alarm_second_ones <= 4'd0;
                        else
                            alarm_second_ones <= alarm_second_ones + 1'd1;
                    end
                    */
                    default: ;
                endcase
            // 正常模式下的闹钟触发检测 (用于清除 alarm_set)
            end else if (mode == NORMAL_MODE && alarm_set) begin
                // 检查当前时间是否等于闹钟时间
                if (hour_tens == alarm_hour_tens &&
                    hour_ones == alarm_hour_ones &&
                    minute_tens == alarm_minute_tens &&
                    minute_ones == alarm_minute_ones &&
                    // 根据是否设置闹钟秒来决定是否比较秒
                    second_tens == 3'b0 && // 比较秒十位
                    second_ones == 4'b0) begin // 比较秒个位
                    // 闹钟时间到达，清除设置标志 (响铃由第二个 always 块处理)
                    alarm_set <= 1'b0;
                end
                // else: 闹钟已设置但时间未到，alarm_set 保持 1'b1
            // 可选: 正常模式且闹钟未设置时，让闹钟寄存器跟踪当前时间
            end else if (mode == NORMAL_MODE && !alarm_set) begin
                 alarm_hour_tens <= hour_tens;
                 alarm_hour_ones <= hour_ones;
                 alarm_minute_tens <= minute_tens;
                 alarm_minute_ones <= minute_ones;
                 // alarm_set 保持 1'b0
            end
            // else: 其他情况 (例如 CLOCK_SET_MODE)，alarm_set 保持不变
        end
    end

    // 第二个 always 块: 管理响铃/报时状态寄存器和输出
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            alarm_ring <= 1'b0;
            time_ring <= 1'b0;
            alarm_ring_active <= 1'b0; // 复位状态
            time_ring_active <= 1'b0; // 复位状态
            // alarm_set 在第一个 always 块中复位
        end else begin
            // 默认输出等于状态寄存器的值
            alarm_ring <= alarm_ring_active;
            time_ring <= time_ring_active;

            // 当 1Hz 脉冲到来时，清除激活状态 (响铃/报时持续1秒)
            if (clk_1hz) begin
                alarm_ring_active <= 1'b0;
                time_ring_active <= 1'b0;
            end

            // 检查触发条件 (这会覆盖同一时钟周期的 clk_1hz 清除操作)
            // 只在 NORMAL_MODE 下检查触发
            if (mode == NORMAL_MODE) begin
                // 处理闹钟响铃触发
                // 检查时间匹配 并且 闹钟已设置 (alarm_set == 1'b1)
                if (hour_tens == alarm_hour_tens &&
                    hour_ones == alarm_hour_ones &&
                    minute_tens == alarm_minute_tens &&
                    minute_ones == alarm_minute_ones &&
                    // 根据是否设置闹钟秒来决定是否比较秒
                    second_tens == 3'b0 && // 比较秒十位
                    second_ones == 4'b0 && // 比较秒个位
                    alarm_set) begin                    // 检查闹钟设置标志
                    alarm_ring_active <= 1'b1; // 激活闹钟状态
                    // 不再在此处清除 alarm_set
                end

                // 处理整点报时触发 (xx:00:00)
                if (minute_tens == 3'd0 && minute_ones == 4'd0 &&
                    second_tens == 3'd0 && second_ones == 4'd0) begin
                    time_ring_active <= 1'b1; // 激活报时状态
                end
            end else begin
                // 在设置模式下，确保状态不被激活 (即使时间恰好匹配)
                 alarm_ring_active <= 1'b0;
                 time_ring_active <= 1'b0;
            end
        end
    end

endmodule